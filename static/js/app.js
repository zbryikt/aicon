// Generated by LiveScript 1.2.0
var main;
angular.module('main', ['ui.select2']).config(function($httpProvider){
  return $httpProvider.defaults.headers.common["X-CSRFToken"] = $.cookie('csrftoken');
}).directive('tags', function($compile){
  return {
    restrict: 'E',
    replace: true,
    scope: {
      "model": '=ngModel',
      name: '@'
    },
    template: "<input type='hidden' class='tags'>",
    link: function(scope, element, attrs){
      $(element).select2({
        tokenSeparators: [",", " "],
        multiple: true,
        data: [],
        createSearchChoice: function(term, data){
          if (data.filter(function(it){
            return it.text.localeCompare(term) === 0;
          }).length === 0) {
            return {
              id: term,
              text: term
            };
          }
        }
      }).on('change', function(e){
        return scope.$apply(function(){
          return scope.model = $(element).select2('data');
        });
      });
      return scope.$watch('model', function(v){
        return $(element).select2('data', v);
      });
    }
  };
}).directive('license', function($compile){
  return {
    restrict: 'E',
    replace: true,
    scope: {
      "model": '=ngModel',
      name: '@'
    },
    template: "<input type='hidden'>",
    link: function(scope, element, attrs){
      element.select2({
        placeholder: "choose a license",
        minimumInputLength: 0,
        ajax: {
          url: '/license/',
          type: 'GET',
          dataType: 'json',
          quiteMillis: 100,
          data: function(term, page){
            return {
              q: term,
              page_limit: 10,
              page: page
            };
          },
          results: function(d, p){
            return {
              results: d.data,
              more: d.hasNext
            };
          }
        },
        initSelection: function(){},
        formatResult: function(it){
          return (it.fields && "<div>" + it.pk + ". " + (it.fields && it.fields['name']) + "</div>") || "";
        },
        formatSelection: function(it){
          return (it.fields && "<div>" + it.pk + ". " + it.fields['name'] + "</div>") || "";
        },
        formatNoMatches: function(){
          return '找不到這個項目';
        },
        formatSearching: function(){
          return '搜尋中';
        },
        formatInputTooShort: function(){
          return '請多打幾個字';
        },
        id: function(e){
          return e.fields && e.pk + "" || "";
        },
        escapeMarkup: function(it){
          return it;
        }
      }).on('change', function(e){
        return scope.$apply(function(){
          return scope.model = $(element).select2('data');
        });
      });
      return scope.$watch('model', function(v){
        return $(element).select2('data', v);
      });
    }
  };
}).directive('icon', function($compile){
  return {
    restrict: 'E',
    replace: true,
    scope: {
      "src": "@",
      "del": "&",
      "class": "@"
    },
    template: "<div class='svg-icon {{class}}'><div class='object'></div><div class='mask'></div>" + "<div class='delete' ng-click='$event.stopPropagation();del({e: $event})'>" + "<i class='glyphicon glyphicon-minus-sign'></i></div></div>",
    link: function(scope, element, attrs){
      if (!attrs.del) {
        element.find('.delete').remove();
      }
      return attrs.$observe('src', function(v){
        if (v) {
          return element.find('.object').replaceWith("<object class='object' type='image/svg+xml' data='/m/" + v + "'></object>");
        } else {
          return element.find('.object').replaceWith("<div class='object'>no data</div>");
        }
      });
    }
  };
});
main = function($scope, $http){
  $scope.glyphs = [];
  $scope.tag = {
    list: []
  };
  $scope.lic = {
    name: "",
    desc: "",
    url: "",
    pd: false,
    at: false,
    sa: false,
    nd: false,
    nc: false,
    file: null
  };
  $scope.iconset = {
    list: [],
    cur: {},
    detail: true
  };
  $scope.iconset.cur = {
    icons: [],
    pk: -1,
    name: ""
  };
  $scope.searchKeyword = "";
  $scope.detail = {};
  $scope.mouse = {
    select: false
  };
  $scope.mouse.over = function(e, g){
    console.log("moving: " + g.name);
    if (this.select) {
      return g.added = !g.added;
    }
  };
  $scope.searchTimer = null;
  $scope.$watch('searchKeyword', function(){
    if ($scope.searchTimer) {
      clearTimeout($scope.searchTimer);
    }
    return $scope.searchTimer = setTimeout(function(){
      return $scope.search();
    }, 700);
  });
  $scope.detail.show = function(e, s){
    this.cur = s;
    console.log(s.tags, s.license);
    e.stopPropagation();
    return $('#glyph-detail').modal('show');
  };
  $scope.iconset.del = function(e, s){
    var this$ = this;
    return $http['delete']("/iconset/" + s.pk).success(function(d){
      var that;
      if (that = this$.list.indexOf(s) + 1) {
        return this$.list.splice(that - 1, 1);
      }
    });
  };
  $scope.iconset.cur.add = function(g){
    if (!this.icons.filter(function(it){
      return parseInt(it.pk) === parseInt(g.pk);
    }).length) {
      g.added = true;
      return this.icons.push(g);
    } else {
      this.icons.splice(this.icons.indexOf(g), 1);
      return g.added = false;
    }
  };
  $scope.iconset.cur.del = function(e, g){
    var that;
    if (that = this.icons.indexOf(g) + 1) {
      return this.icons.splice(that - 1, 1);
    }
  };
  $scope.search = function(){
    console.log("searching: ", $scope.searchKeyword);
    return $http.get('/glyph/', {
      params: {
        q: $scope.searchKeyword,
        page_limit: 100
      }
    }).success(function(d){
      console.log("load glyphs..");
      return $scope.glyphs = d.data;
    });
  };
  $scope.buildFont = function(){
    return $http.post('/build/', $scope.iconset.cur.icons.map(function(it){
      return it.pk;
    })).success(function(d){
      if (d && d.name) {
        console.log("redirect to /build/" + d.name);
        return window.location.href = "/build/" + d.name;
      } else {
        return console.log("build font failed.");
      }
    });
  };
  $scope.iconset.cur.save = function(){
    var ref$, ref1$;
    if (this.icons.length === 0) {
      return;
    }
    return $http.post('/iconset/', (ref$ = (ref1$ = {}, ref1$.pk = this.pk, ref1$.name = this.name, ref1$), ref$.icons = this.icons.map(function(it){
      return it.pk;
    }), ref$)).success(function(d){
      console.log("save iconset done");
      return $scope.iconset.load();
    });
  };
  $scope.iconset.cur.set = function(s){
    var ref$;
    return (ref$ = $scope.iconset.cur).icons = s.icons, ref$.pk = s.pk, ref$.name = s.name, s;
  };
  $scope.iconset.load = function(){
    return $http.get('/iconset/').success(function(d){
      return $scope.iconset.list = d;
    });
  };
  $scope.lic.load = function(){
    return $http.get('/license/').success(function(d){
      return $scope.lic.list = d.data;
    });
  };
  $scope.lic.add = function(){
    if (!$scope.lic.name) {
      return;
    }
    $('#lic-form-pxy').load(function(){
      return $('#lic-uploader').modal('hide');
    });
    return $('#lic-form').submit();
  };
  $scope.tag.load = function(){
    return $http.get('/tag/').success(function(d){
      return $scope.tag.list = d.data;
    });
  };
  $scope.glyph = {
    h: {
      init: function(){
        var this$ = this;
        $('#glyph-new-form-pxy').load(function(){
          return this$.proxy();
        });
        return this.init = function(){};
      },
      proxy: function(){
        return this.main();
      },
      main: null,
      set: function(it){
        this.init();
        return this.main = it;
      }
    },
    n: null,
    init: function(){
      var x$;
      this.list.data = [];
      this.n = this.item.data = $.extend(true, {}, import$({}, this.initData));
      x$ = $('#glyph-new-modal').modal('show');
      x$.find('.single').show();
      x$.find('.multiple').hide();
      return x$;
    },
    list: {
      data: [],
      save: function(){
        var len, i$, ref$, len$, d, k;
        len = 0;
        console.log("todo: some how multi-editing form checking is not working. please check");
        for (i$ = 0, len$ = (ref$ = this.data).length; i$ < len$; ++i$) {
          d = ref$[i$];
          len += (fn$()).filter(fn1$).length;
        }
        if (len > 0) {
          return;
        }
        $scope.glyph.h.set(this.callback);
        return $('#glyph-new-form').submit();
        function fn$(){
          var results$ = [];
          for (k in {
            name: d.name,
            author: d.author,
            license: d.license,
            tags: d.tags
          }) {}
          return results$;
        }
        function fn1$(it){
          return it;
        }
      },
      callback: function(){
        var pks, this$ = this;
        pks = JSON.parse($('#glyph-new-form-pxy').contents().find('body').html());
        console.log("pks: ", pks);
        if (pks.length === $scope.glyph.list.data.length) {
          $('#glyph-new-modal').modal('hide');
          return $scope.search();
        } else {
          $('#glyph-new-modal .error-hint.missed').show().delay(2000).fadeOut(1000);
        }
        return $scope.$apply(function(){
          return $scope.glyph.list.data = $scope.glyph.list.data.filter(function(it){
            return !in$(it.id, pks);
          });
        });
      }
    },
    item: {
      data: {},
      save: function(){
        var k;
        if ((function(){
          var ref$, results$ = [];
          for (k in {
            name: (ref$ = this.data).name,
            author: ref$.author,
            license: ref$.license,
            tags: ref$.tags
          }) {
            results$.push(!(this.data[k].p = !this.data[k].v ? false : true));
          }
          return results$;
        }.call(this)).filter(function(it){
          return it;
        }).length > 0) {
          return;
        }
        if (!$('#glyph-new-svg').val()) {
          return this.data.svg.p = false;
        }
        $scope.glyph.h.set(this.callback);
        return $('#glyph-new-form').submit();
      },
      callback: function(){
        var pks, f;
        pks = JSON.parse($('#glyph-new-form-pxy').contents().find('body').html());
        if (pks.length === 0) {
          return $('#glyph-new-modal .error-hint.error').show().delay(2000).fadeOut(1000);
        }
        f = document.getElementById('glyph-new-svg').files;
        if (f.length === 1) {
          $('#glyph-new-modal').modal('hide');
          return $scope.search();
        }
        angular.element('#glyph-new-modal').scope().$apply(function(){
          var i, x;
          return $scope.glyph.list.data = (function(){
            var i$, ref$, len$, ref1$, ref2$, results$ = [];
            for (i$ = 0, len$ = (ref$ = f).length; i$ < len$; ++i$) {
              i = i$;
              x = ref$[i$];
              results$.push($.extend(true, {}, (ref2$ = {
                id: pks[i],
                svg: "svg/" + x.name
              }, ref2$.name = (ref1$ = $scope.glyph.item.data).name, ref2$.author = ref1$.author, ref2$.author_url = ref1$.author_url, ref2$.license = ref1$.license, ref2$.tags = ref1$.tags, ref2$)));
            }
            return results$;
          }());
        });
        $("#glyph-new-modal .multiple").show();
        return $("#glyph-new-modal .single").hide();
      }
    },
    initData: {
      name: {
        p: true,
        v: ""
      },
      author: {
        p: true,
        v: ""
      },
      author_url: {
        p: true,
        v: ""
      },
      license: {
        p: true,
        v: ""
      },
      tags: {
        p: true,
        v: ""
      },
      svg: {
        p: true,
        v: "(no file selected)",
        set: function(v){
          var this$ = this;
          return $scope.$apply(function(){
            var f, res$, i$, ref$, len$, x;
            res$ = [];
            for (i$ = 0, len$ = (ref$ = document.getElementById('glyph-new-svg').files).length; i$ < len$; ++i$) {
              x = ref$[i$];
              res$.push(x.name);
            }
            f = res$;
            return this$.v = f.length > 1
              ? f[0] + "\n... (" + f.length + " files)"
              : f.length === 1 ? f[0] + "" : "(no file selected)";
          });
        }
      }
    }
  };
  $scope.lic.load();
  return $scope.iconset.load();
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}