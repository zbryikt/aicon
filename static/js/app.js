// Generated by LiveScript 1.2.0
var main;
angular.module('main', ['ui.select2', 'utils']).config(function($httpProvider){
  return $httpProvider.defaults.headers.common["X-CSRFToken"] = $.cookie('csrftoken');
});
main = function($scope, $http){
  $scope = import$($scope, {
    ui: {
      detail: false
    },
    st: {
      sets: [],
      init: function(){
        var this$ = this;
        return $http.get('/iconset/').success(function(d){
          return this$.sets = d;
        });
      },
      len: 0,
      name: "圖示集",
      list: {},
      cur: {},
      rmset: function(e, s){
        var this$ = this;
        return $http['delete']("/iconset/" + s.pk).success(function(d){
          var that;
          if (that = this$.sets.indexOf(s) + 1) {
            return this$.sets.splice(that - 1, 1);
          }
        });
      },
      add: function(g){
        var that, ref$, key$, ref1$;
        if (that = g.added = this.list[g.pk]
          ? (ref1$ = (ref$ = this.list)[key$ = g.pk], delete ref$[key$], ref1$) && false
          : (this.list[g.pk] = g) && true) {
          return this.len++ && that;
        }
      },
      clean: function(){
        var k, this$ = this;
        return (function(){
          var results$ = [];
          for (k in this.list) {
            results$.push(k);
          }
          return results$;
        }.call(this)).map(function(it){
          this$.list[it].added = false;
          delete this$.list[it];
          return this$.len--;
        });
      },
      load: function(s){
        var this$ = this;
        this.clean();
        this.cur = s;
        this.name = s.name;
        return s.icons.map(function(it){
          return this$.add($scope.gh.item(it.pk, it));
        });
      },
      save: function(){
        var ref$, ref1$, k, this$ = this;
        if (!this.len) {
          return;
        }
        ref1$ = {
          name: this.name,
          icons: []
        }, (ref$ = this.cur).name = ref1$.name, ref$.icons = ref1$.icons;
        (function(){
          var results$ = [];
          for (k in this.list) {
            results$.push(k);
          }
          return results$;
        }.call(this)).map(function(it){
          return this$.cur.icons.push(this$.list[it]);
        });
        return $http.post('/iconset/', {
          pk: this.cur.pk,
          name: this.name,
          icons: (function(){
            var results$ = [];
            for (k in this.list) {
              results$.push(k);
            }
            return results$;
          }.call(this)).map(function(it){
            return this$.list[it].pk;
          })
        });
      }
    },
    qr: {
      keyword: "",
      timer: null,
      init: function(){
        var this$ = this;
        return $scope.$watch('query.keyword', function(){
          if (this$.timer) {
            clearTimeout(this$.timer);
          }
          return this$.timer = setTimeout(function(){
            return this$.load();
          }, 700);
        });
      },
      load: function(){
        return $http.get('/glyph/', {
          params: {
            q: this.keyword,
            page_limit: 100
          }
        }).success(function(d){
          $scope.gh.list = [];
          console.log("qr.load", d);
          return d.data.map(function(it){
            return $scope.gh.list.push($scope.gh.item(it.pk, it));
          });
        });
      }
    },
    lc: 0,
    gh: {
      list: [],
      hash: {},
      item: function(k, v){
        if (v && !(k in this.hash)) {
          return this.hash[k] = v;
        } else {
          return this.hash[k];
        }
      },
      'new': 0
    }
  });
  $scope.st.init();
  return $scope.qr.init();
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}